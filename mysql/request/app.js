const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '0000',
  database: 'test'
});

connection.connect((err) => {
  if (err) throw err;
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
});

const createTableQuery = `
  CREATE TABLE IF NOT EXISTS products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10,2),
    category VARCHAR(50),
    stock INT,
    description TEXT,
    supplier_id INT
  )
`;

connection.query('DROP TABLE IF EXISTS products', (err) => {
  if (err) throw err;
  console.log('üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ `products` —É–¥–∞–ª–µ–Ω–∞');
});

connection.query(createTableQuery, (error) => {
  if (error) throw error;
  console.log('üì¶ –¢–∞–±–ª–∏—Ü–∞ `products` —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
});

const sampleProducts = [
  { name: 'iPhone 13', price: 79999.99, category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', stock: 10, description: '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω', supplier_id: 1 },
  { name: 'Samsung Galaxy S22', price: 69999.99, category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', stock: 15, description: '–ê–Ω–¥—Ä–æ–∏–¥ —Ñ–ª–∞–≥–º–∞–Ω', supplier_id: 2 },
  { name: 'MacBook Pro', price: 149999.99, category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', stock: 5, description: '–ù–æ—É—Ç–±—É–∫ Apple', supplier_id: 1 },
  { name: '–ö–Ω–∏–≥–∞ "JS –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤"', price: 899.99, category: '–ö–Ω–∏–≥–∏', stock: 20, description: '–û–±—É—á–µ–Ω–∏–µ JavaScript', supplier_id: 3 },
  { name: '–ë–ª–æ–∫–Ω–æ—Ç', price: 199.99, category: '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', stock: 100, description: '–î–ª—è –∑–∞–º–µ—Ç–æ–∫', supplier_id: null },
  { name: '–ú—ã—à—å –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è', price: 1499.99, category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', stock: 0, description: 'USB –º—ã—à—å', supplier_id: 2 },
  { name: '–ß–µ—Ö–æ–ª –¥–ª—è iPhone', price: 599.99, category: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', stock: 50, description: '–°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π', supplier_id: 3 }
];

sampleProducts.forEach(product => {
  connection.query('INSERT INTO products SET ?', product, (err) => {
    if (err) console.log(err);
  });
});

connection.query(
  'SELECT DISTINCT category FROM products',
  (err, results) => {
    if (err) throw err;
    console.log('üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', results);
  }
);

connection.query(
  "SELECT * FROM products WHERE category IN ('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ö–Ω–∏–≥–∏')",
  (err, results) => {
    if (err) throw err;
    console.log('üì±üìö –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∫–Ω–∏–≥–∏:', results);
  }
);
connection.query(
  "SELECT * FROM products WHERE category NOT IN ('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ö–Ω–∏–≥–∏')",
  (err, results) => {
    if (err) throw err;
    console.log('üö´ –ù–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –Ω–µ –∫–Ω–∏–≥–∏:', results);
  }
);
connection.query(
  'SELECT * FROM products WHERE price BETWEEN 500 AND 2000',
  (err, results) => {
    if (err) throw err;
    console.log('üí∞ –¶–µ–Ω–∞ –æ—Ç 500 –¥–æ 2000:', results);
  }
);
connection.query(
  "SELECT * FROM products WHERE name LIKE '%iPhone%'",
  (err, results) => {
    if (err) console.log(err);
    console.log('üì± iPhone:', results);
  }
);
connection.query(
  "SELECT * FROM products WHERE description REGEXP '–Ω–æ—É—Ç–±—É–∫|—Å–º–∞—Ä—Ç—Ñ–æ–Ω'",
  (err, results) => {
    if (err) console.log(err);
    console.log('üîç –ù–æ—É—Ç–±—É–∫ –∏–ª–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω:', results);
  }
);
connection.query(
  'SELECT * FROM products WHERE supplier_id IS NULL',
  (err, results) => {
    if (err) console.log(err);
    console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', results);
  }
);
connection.query(
  'SELECT * FROM products ORDER BY price DESC LIMIT 3',
  (err, results) => {
    if (err) console.log(err);
    console.log('üî• –¢–æ–ø 3 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:', results);
  }
);
connection.query(
  'SELECT * FROM products WHERE category = "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞" AND price > 1000 ORDER BY price ASC LIMIT 2',
  (err, results) => {
    if (err) console.log(err);
    console.log('üõí –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', results);
  }
);
connection.end((err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err.message);
  } else {
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
  }
});