const mysql = require('mysql2/promise');

async function main() {
  let connection;
  try {
    // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —Å–µ—Ä–≤–µ—Ä—É (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '0000'
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MySQL —Å–µ—Ä–≤–µ—Ä—É');

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    await connection.query('CREATE DATABASE IF NOT EXISTS company_db');
    console.log('üõ¢Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö company_db —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    // 3. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await connection.changeUser({ database: 'company_db' });
    console.log('üîå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö company_db');

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã employees
    await connection.query(`
      CREATE TABLE IF NOT EXISTS employees (
        id INT AUTO_INCREMENT PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        department VARCHAR(50) NOT NULL,
        position VARCHAR(50) NOT NULL,
        salary DECIMAL(10,2) NOT NULL,
        hire_date DATE NOT NULL,
        bonus DECIMAL(10,2) DEFAULT 0
      )
    `);
    console.log('üìä –¢–∞–±–ª–∏—Ü–∞ employees —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    // 5. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –ø—É—Å—Ç–∞—è)
    await seedDatabase(connection);

    // 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await executeAggregateQueries(connection);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function seedDatabase(connection) {
  const [rows] = await connection.query('SELECT COUNT(*) as count FROM employees');
  if (rows[0].count > 0) {
    console.log('üìå –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ');
    return;
  }

  const employees = [
    { first_name: '–ò–≤–∞–Ω', last_name: '–ò–≤–∞–Ω–æ–≤', department: 'IT', position: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', salary: 120000, hire_date: '2020-05-15', bonus: 12000 },
    { first_name: '–ü–µ—Ç—Ä', last_name: '–ü–µ—Ç—Ä–æ–≤', department: 'IT', position: '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', salary: 90000, hire_date: '2019-11-20', bonus: 9000 },
    { first_name: '–°–µ—Ä–≥–µ–π', last_name: '–°–µ—Ä–≥–µ–µ–≤', department: 'IT', position: 'DevOps', salary: 150000, hire_date: '2021-03-10', bonus: 15000 },
    { first_name: '–ê–Ω–Ω–∞', last_name: '–°–º–∏—Ä–Ω–æ–≤–∞', department: 'Marketing', position: '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', salary: 85000, hire_date: '2019-08-14', bonus: 4250 },
    { first_name: '–ú–∞—Ä–∏—è', last_name: '–ö—É–∑–Ω–µ—Ü–æ–≤–∞', department: 'Sales', position: '–ú–µ–Ω–µ–¥–∂–µ—Ä', salary: 95000, hire_date: '2020-01-10', bonus: 4750 }
  ];

  for (const emp of employees) {
    await connection.query('INSERT INTO employees SET ?', emp);
  }
  console.log(`üå± –î–æ–±–∞–≤–ª–µ–Ω–æ ${employees.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
}

// –§—É–Ω–∫—Ü–∏—è —Å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
async function executeAggregateQueries(connection) {
  console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ì–†–ï–ì–ê–¢–ù–´–• –§–£–ù–ö–¶–ò–ô ===');

  // 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const [count] = await connection.query('SELECT COUNT(*) AS total FROM employees');
  console.log(`1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${count[0].total}`);

  // 2. –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç
  const [sum] = await connection.query('SELECT SUM(salary) AS total FROM employees');
  console.log(`2. –û–±—â–∏–π —Ñ–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç: ${parseFloat(sum[0].total).toLocaleString('ru-RU')} —Ä—É–±.`);

  // 3. –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞
  const [avg] = await connection.query('SELECT AVG(salary) AS average FROM employees');
  console.log(`3. –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${parseFloat(avg[0].average).toFixed(2)} —Ä—É–±.`);

  // 4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
  const [max] = await connection.query('SELECT MAX(salary) AS maximum FROM employees');
  console.log(`4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${parseFloat(max[0].maximum).toLocaleString('ru-RU')} —Ä—É–±.`);

  // 5. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
  const [min] = await connection.query('SELECT MIN(salary) AS minimum FROM employees');
  console.log(`5. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${parseFloat(min[0].minimum).toLocaleString('ru-RU')} —Ä—É–±.`);

  // 6. –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤
  const [bonus] = await connection.query('SELECT SUM(bonus) AS total FROM employees');
  console.log(`6. –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: ${parseFloat(bonus[0].total).toLocaleString('ru-RU')} —Ä—É–±.`);

  // 7. –°—Ä–µ–¥–Ω–∏–π —Å—Ç–∞–∂ –≤ –¥–Ω—è—Ö
  const [exp] = await connection.query('SELECT AVG(DATEDIFF(CURDATE(), hire_date)) AS days FROM employees');
  const avgExpDays = parseFloat(exp[0].days);
  const avgExpYears = (avgExpDays / 365).toFixed(1);
  console.log(`7. –°—Ä–µ–¥–Ω–∏–π —Å—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã: ${avgExpYears} –ª–µ—Ç (${Math.round(avgExpDays)} –¥–Ω–µ–π)`);
}

// –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();